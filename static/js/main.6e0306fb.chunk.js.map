{"version":3,"sources":["components/MenuBundleProducts.js","components/MenuProductCategories.js","components/Menus.js","App.js","serviceWorker.js","index.js"],"names":["MenuBundleProducts","props","state","menuProduct","bundleProduct","className","this","map","bundle","key","_id","src","refBundleProduct","imageUrl","alt","name","description","price","defaultPrice","Component","MenuProductCategories","menuToggle","menuProducts","product","onClick","setState","menuBundleProducts","Menus","menuBotton","mainMenu","data","menus","menu","index","companyId","menuProductCategories","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAyCeA,E,YApCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,aAAa,EACbC,cAAe,EAAKH,MAAMG,eALf,E,sEAWf,OACI,yBAAKC,UAAU,aACVC,KAAKJ,MAAME,cAAcG,IAAI,SAACC,GAAD,OAC1B,yBAAKC,IAAKD,EAAOE,IAAKL,UAAU,sBAE5B,yBAAKA,UAAU,YAEX,yBAAKA,UAAU,aAEX,yBAAMM,IAAKH,EAAOI,iBAAiBC,SAAUC,IAAKN,EAAOI,iBAAiBG,QAG9E,2BAAIP,EAAOI,iBAAiBI,aAE5B,wBAAIX,UAAU,gBAAgBG,EAAOS,MAAQT,EAAOS,MAAQT,EAAOI,iBAAiBM,aAApF,QATJ,a,GAlBSC,aC+BlBC,E,YA5BX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTmB,YAAY,EACZC,aAAc,EAAKrB,MAAME,aALd,E,sEAST,IAAD,OAEL,OACI,yBAAKE,UAAU,aACVC,KAAKJ,MAAMoB,aAAaf,IAAI,SAACgB,GAAD,OACzB,yBAAKd,IAAKc,EAAQb,IAAKL,UAAU,yBAC7B,6BACI,wBAAImB,QAAS,kBAAM,EAAKC,SAAS,CAACJ,YAAa,EAAKnB,MAAMmB,eAAeE,EAAQR,MACjF,6BACS,EAAKb,MAAMmB,YAAc,kBAAC,EAAD,CAAoBjB,cAAemB,EAAQG,+B,GApBrEP,aC4BrBQ,E,2MA1BPzB,MAAQ,CACN0B,YAAY,G,wEAEJ,IAAD,OAEHC,EAAWC,EAAKC,MAElB,OACI,yBAAK1B,UAAU,aACdwB,EAAStB,IAAI,SAACyB,EAAMC,GAAP,OACV,yBAAKxB,IAAKwB,EAAO5B,UAAU,SAC3B,yBAAKA,UAAU,WAAYmB,QAAS,kBAAM,EAAKC,SAAS,CAACG,YAAa,EAAK1B,MAAM0B,eACzE,4BAAKI,EAAKjB,MACV,4BAAKiB,EAAKE,WACV,2BAAIF,EAAKhB,cAEjB,6BACC,EAAKd,MAAM0B,YAAc,kBAAC,EAAD,CAAuBzB,YAAa6B,EAAKG,gC,GAnBnEhB,aCoBLiB,MArBf,WACI,OACE,yBAAK/B,UAAU,OAER,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,YACZ,yCACA,oCACA,0CAGF,kBAAC,EAAD,MARH,QCKOgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.6e0306fb.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\n\r\nclass MenuBundleProducts extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            menuProduct: false,\r\n            bundleProduct: this.props.bundleProduct\r\n        }\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.bundleProduct.map((bundle) => (\r\n                    <div key={bundle._id} className=\"MenuBundleProducts\">\r\n    \r\n                        <div className=\"itemInfo\">\r\n                            \r\n                            <div className=\"itemPhoto\">\r\n                                {/* <h3>Art: {bundle.refBundleProduct.articleNumber}</h3> */}\r\n                                <img  src={bundle.refBundleProduct.imageUrl} alt={bundle.refBundleProduct.name} />\r\n                            </div>\r\n                            \r\n                            <p>{bundle.refBundleProduct.description}</p>\r\n                            \r\n                            <h4 className=\"defaultPrice\">{bundle.price ? bundle.price : bundle.refBundleProduct.defaultPrice}:-kr</h4> {/* Comment and use down*/}\r\n                            {/* <h4 className=\"defaultPrice\">{bundle.refBundleProduct.defaultPrice}:-kr</h4> */}\r\n                        </div> \r\n    \r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default MenuBundleProducts\r\n","import React, {Component} from 'react'\r\nimport MenuBundleProducts from './MenuBundleProducts';\r\n\r\n\r\nclass MenuProductCategories extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            menuToggle: false,\r\n            menuProducts: this.props.menuProduct\r\n        }\r\n    }\r\n      \r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.menuProducts.map((product) => (\r\n                    <div key={product._id} className=\"MenuProductCategories\">\r\n                        <div >\r\n                            <h2 onClick={() => this.setState({menuToggle: !this.state.menuToggle})}>{product.name}</h2>\r\n                            <div>\r\n                                    {this.state.menuToggle && <MenuBundleProducts bundleProduct={product.menuBundleProducts} />}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default MenuProductCategories\r\n","import React, {Component} from 'react'\r\nimport data from '../data/menu_test.json'\r\nimport MenuProductCategories from './MenuProductCategories';\r\n\r\nclass Menus extends Component{\r\n\r\n        state = {\r\n          menuBotton: false\r\n        }\r\n        render() {\r\n    \r\n        const mainMenu = data.menus;\r\n\r\n            return (\r\n                <div className=\"container\">\r\n                {mainMenu.map((menu, index) => (\r\n                    <div key={index} className=\"Menus\">\r\n                    <div className=\"menuInfo\"  onClick={() => this.setState({menuBotton: !this.state.menuBotton})}>\r\n                            <h1>{menu.name}</h1>\r\n                            <h2>{menu.companyId}</h2>\r\n                            <p>{menu.description}</p>\r\n                    </div>\r\n                    <hr />\r\n                    {this.state.menuBotton && <MenuProductCategories menuProduct={menu.menuProductCategories} />}\r\n                    </div>\r\n                ))}\r\n\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Menus\r\n","import React from 'react';\nimport Menus from './components/Menus';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n             \n             <div className=\"container\">\n\n               <div className=\"taskInfo\">\n                  <h1>qopla.com</h1> \n                  <h2>Task</h2>\n                  <p>2019-08-26</p>\n                </div> \n\n                <Menus />  {/* Main Menu Containing   2 menus */}\n             </div>\n\n      </div>\n    );\n  }\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}